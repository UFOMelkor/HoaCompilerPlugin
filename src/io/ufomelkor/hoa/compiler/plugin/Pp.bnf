{
    parserClass="io.ufomelkor.hoa.compiler.plugin.parser.PpParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Pp"
    psiImplClassSuffix="Impl"
    psiPackage="io.ufomelkor.hoa.compiler.plugin.psi"
    psiImplPackage="io.ufomelkor.hoa.compiler.plugin.psi.impl"

    elementTypeHolderClass="io.ufomelkor.hoa.compiler.plugin.psi.PpTypes"
    elementTypeClass="io.ufomelkor.hoa.compiler.plugin.psi.PpElementType"
    tokenTypeClass="io.ufomelkor.hoa.compiler.plugin.psi.PpTokenType"

    tokens = [
        T_COMMENT = "//[^\n\r]*"
        T_SKIP = "%skip"
        T_TOKEN = "%token"
        T_SWITCH_NAMESPACE = "->"
        T_NAME = "[a-zA-Z_][a-zA-Z0-9_]*"
        T_COLON = ":"
        T_REGEXP = "regexp:[^\s]+"
        T_SPACES = "regexp:[ \t\f]+"

        T_HASH = "#"
        T_OR = "|"
        T_ZERO_OR_ONE = "?"
        T_ONE_OR_MORE = "+"
        T_ZERO_OR_MORE = "*"
        T_N_TO_M = "regexp:\{\s*[0-9]+\s*,\s*[0-9]+\s*\}"
        T_ZERO_TO_M = "regexp:\{\s*,\s*[0-9]+\}"
        T_N_OR_MORE = "regexp:\{\s*[0-9]+\s*,\s*\}"
        T_EXACTLY_N = "regexp:\{\s*[0-9]+\s*\}"
        T_SKIPPED = "::"
        T_KEPT_BEGIN = "<"
        T_KEPT_END = ">"
        T_NAMED = "()"
        T_CAPTURING_BEGIN = "("
        T_CAPTURING_END = ")"
        T_UNIFICATION_BEGIN = "["
        T_UNIFICATION = "regexp:[0-9]+"
        T_UNIFICATION_END = "]"
    ]
}

File ::= (Comment|Skip|Token|Rule)* // Skip|Token|Choice
Comment ::= T_COMMENT

Skip ::= T_SKIP T_SPACES (Namespace T_COLON)? SkipName T_SPACES RegExp
Namespace ::= T_NAME
SkipName ::= T_NAME
RegExp ::= T_REGEXP+
Token ::= T_TOKEN T_SPACES (Namespace T_COLON)? TokenName T_SPACES RegExp (T_SPACES SwitchNamespace)?
TokenName ::= T_NAME
SwitchNamespace ::= T_SWITCH_NAMESPACE T_SPACES T_NAME

Rule ::= T_HASH? T_RULE_NAME T_COLON Comment? (Choice|Concatenation|Repetition|Simple)
Choice ::= (Concatenation|Repetition|Simple) (T_OR (Concatenation|Repetition|Simple))+
Concatenation ::= (Repetition|Simple) (Repetition|Simple)+
Repetition ::= Simple Quantifier
NamedNode ::= T_HASH T_NAME

Simple ::= (Capturing | Skipped | Kept | Named) NamedNode? Comment?
Capturing ::= T_CAPTURING_BEGIN (Choice|Concatenation|Repetition|Simple) T_CAPTURING_END
Skipped ::= T_SKIPPED T_NAME Unification? T_SKIPPED
Kept ::= T_KEPT_BEGIN T_NAME Unification? T_KEPT_END
Named ::= T_NAME T_NAMED

Unification ::= T_UNIFICATION_BEGIN T_UNIFICATION T_UNIFICATION_END
Quantifier ::= T_ZERO_OR_ONE
    | T_ONE_OR_MORE
    | T_ZERO_OR_MORE
    | T_ZERO_TO_M
    | T_N_TO_M
    | T_N_OR_MORE
    | T_EXACTLY_N
